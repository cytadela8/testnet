# coding: utf-8

"""
    Aeternity Testnet

    This is the [Aeternity](https://www.aeternity.com/) Testnet API.

    OpenAPI spec version: 1.0.0
    Contact: apiteam@aeternity.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SetKeyPair(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'public': 'str',
        'private': 'str',
        'brain_wallet': 'str'
    }

    attribute_map = {
        'public': 'public',
        'private': 'private',
        'brain_wallet': 'brain-wallet'
    }

    def __init__(self, public=None, private=None, brain_wallet=None):
        """
        SetKeyPair - a model defined in Swagger
        """

        self._public = None
        self._private = None
        self._brain_wallet = None

        if public is not None:
          self.public = public
        if private is not None:
          self.private = private
        if brain_wallet is not None:
          self.brain_wallet = brain_wallet

    @property
    def public(self):
        """
        Gets the public of this SetKeyPair.

        :return: The public of this SetKeyPair.
        :rtype: str
        """
        return self._public

    @public.setter
    def public(self, public):
        """
        Sets the public of this SetKeyPair.

        :param public: The public of this SetKeyPair.
        :type: str
        """

        self._public = public

    @property
    def private(self):
        """
        Gets the private of this SetKeyPair.

        :return: The private of this SetKeyPair.
        :rtype: str
        """
        return self._private

    @private.setter
    def private(self, private):
        """
        Sets the private of this SetKeyPair.

        :param private: The private of this SetKeyPair.
        :type: str
        """

        self._private = private

    @property
    def brain_wallet(self):
        """
        Gets the brain_wallet of this SetKeyPair.

        :return: The brain_wallet of this SetKeyPair.
        :rtype: str
        """
        return self._brain_wallet

    @brain_wallet.setter
    def brain_wallet(self, brain_wallet):
        """
        Sets the brain_wallet of this SetKeyPair.

        :param brain_wallet: The brain_wallet of this SetKeyPair.
        :type: str
        """

        self._brain_wallet = brain_wallet

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SetKeyPair):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
